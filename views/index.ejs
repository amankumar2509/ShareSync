<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <link rel="shortcut icon" href="favicon.ico" type="image/x-icon">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>InShare - File Sharing Made Easy</title>
    <link rel="stylesheet" href="/front.css">
</head>

<body>

    <img src="/img/logo.png" alt="Inshare logo" class="logo">
    <section class="upload-container">
        <form  action="/api/files" method="post" enctype="multipart/form-data" id="emailForm">
            <div class="drop-zone">
                <div class="icon-container">
                    <img src="/img/file.svg" draggable="false" class="left" alt="File Icon">
                    <img src="/img/file.svg" draggable="false" class="center" alt="File Icon">
                    <img src="/img/file.svg" draggable="false" class="right" alt="File Icon">
                </div>
                <input type="file" id="fileInput">
                <div class="title">Drop your Files here or, <span id="browseBtn">browse</span></div>
            </div>
        </form>
        <div class="progress-container">
            <div class="bg-progress"></div>

            <div class="inner-container">
                <div class="status">Uploading...</div>
                <div class="percent-container">
                    <span class="percentage" id="progressPercent">0</span>%
                </div>
                <div class="progress-bar"></div>
            </div>

        </div>
        <div class="sharing-container">
            <p class="expire">Link expires in 24 hrs</p>

            <div class="input-container">
                <input type="text" id="fileURL" readonly>
                <img src="img/copy-icon.svg" id="copyURLBtn" alt="copy to clipboard icon">
            </div>

            <!-- <p class="email-info">Or Send via Email</p>
            <div class="email-container">
                <form id="emailForm">
                    <div class="filed">
                        <label for="fromEmail">Your email</label>
                        <input type="email" autocomplete="email" required name="from-email" id="fromEmail">
                    </div>

                    <div class="filed">
                        <label for="toEmail">Receiver's email</label>
                        <input type="email" required autocomplete="receiver" name="to-email" id="toEmail">
                    </div>
                    <div class="send-btn-container">
                        <button type="submit">Send</button>
                    </div>
                </form>
            </div> -->
        </div>
    </section>
    <div class="image-vector"></div>
    <div class="toast">Sample message</div>
    <!-- github fork button -->
    <a href=" " class="github-corner"
        aria-label="View source on GitHub">
        <svg width="80" height="80" viewbox="0 0 250 250"
            style="fill:#131315c9; color:#fff; position: absolute; top: 0; border: 0; right: 0;" aria-hidden="true">
            <path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path>
            <path
                d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2"
                fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm">
            </path>
            <path
                d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z"
                fill="currentColor" class="octo-body">
            </path>
        </svg>
    </a>
    <script>
        const dropZone = document.querySelector(".drop-zone");
        const fileInput = document.querySelector("#fileInput");
        const browseBtn = document.querySelector("#browseBtn");
    
        const bgProgress = document.querySelector(".bg-progress");
        const progressPercent = document.querySelector("#progressPercent");
        const progressContainer = document.querySelector(".progress-container");
        const progressBar = document.querySelector(".progress-bar");
        const status = document.querySelector(".status");
    
        const sharingContainer = document.querySelector(".sharing-container");
        const copyURLBtn = document.querySelector("#copyURLBtn");
        const fileURL = document.querySelector("#fileURL");
        const emailForm = document.querySelector("#emailForm");
    
        const toast = document.querySelector(".toast");
    
        const baseURL = "<%= baseURL %>";

        const uploadURL = `${baseURL}/api/files`; // Update this with your actual upload endpoint
      //  const emailURL = `${baseURL}/api/files/send`; // Update this with your actual email endpoint
    
        const maxAllowedSize = 100 * 1024 * 1024; // 100mb
    
        browseBtn.addEventListener("click", () => fileInput.click());
    
        dropZone.addEventListener("drop", (e) => handleDrop(e));
        dropZone.addEventListener("dragover", (e) => handleDragOver(e));
        dropZone.addEventListener("dragleave", () => dropZone.classList.remove("dragged"));
    
        fileInput.addEventListener("change", () => handleFileInputChange());
        copyURLBtn.addEventListener("click", () => copyFileURL());
    
        emailForm.addEventListener("submit", (e) => handleEmailFormSubmit(e));
    
        const handleDrop = (e) => {
            e.preventDefault();
            const files = e.dataTransfer.files;
            if (files.length === 1) {
                if (files[0].size < maxAllowedSize) {
                    fileInput.files = files;
                    uploadFile();
                } else {
                    showToast("Max file size is 100MB");
                }
            } else if (files.length > 1) {
                showToast("You can't upload multiple files");
            }
            dropZone.classList.remove("dragged");
        };
    
        const handleDragOver = (e) => {
            e.preventDefault();
            dropZone.classList.add("dragged");
        };
    
        const handleFileInputChange = () => {
            if (fileInput.files[0].size > maxAllowedSize) {
                showToast("Max file size is 100MB");
                fileInput.value = ""; // reset the input
                return;
            }
            uploadFile();
        };
    
        const copyFileURL = () => {
            fileURL.select();
            document.execCommand("copy");
            showToast("Copied to clipboard");
        };
    
        const uploadFile = () => {
            const formData = new FormData();
            formData.append("myfile", fileInput.files[0]);
    
            progressContainer.style.display = "block";
    
            const xhr = new XMLHttpRequest();
    
            xhr.upload.onprogress = function (event) {
                let percent = Math.round((100 * event.loaded) / event.total);
                progressPercent.innerText = percent;
                const scaleX = `scaleX(${percent / 100})`;
                bgProgress.style.transform = scaleX;
                progressBar.style.transform = scaleX;
            };
    
            xhr.upload.onerror = function () {
                showToast(`Error in upload: ${xhr.status}.`);
                fileInput.value = "";
            };
    
            xhr.onreadystatechange = function () {
                if (xhr.readyState == XMLHttpRequest.DONE) {
                    onFileUploadSuccess(xhr.responseText);
                }
            };
    
            xhr.open("POST", uploadURL);
            xhr.send(formData);
        };
    
        const onFileUploadSuccess = (res) => {
            fileInput.value = "";
            status.innerText = "Uploaded";
    
            //emailForm[2].removeAttribute("disabled");
            //emailForm[2].innerText = "Send";
            progressContainer.style.display = "none";
    
            const { file: url } = JSON.parse(res);
            console.log(url);
            sharingContainer.style.display = "block";
            fileURL.value = url;
        };
    
        // const handleEmailFormSubmit = (e) => {
        //     e.preventDefault();
    
        //     emailForm[2].setAttribute("disabled", "true");
        //     emailForm[2].innerText = "Sending";
    
        //     const url = fileURL.value;
    
        //     const formData = {
        //         uuid: url.split("/").splice(-1, 1)[0],
        //         emailTo: emailForm.elements["to-email"].value,
        //         emailFrom: emailForm.elements["from-email"].value,
        //     };
        //     console.log(formData);
        //     fetch(emailURL, {
        //         method: "POST",
        //         headers: {
        //             "Content-Type": "application/json",
        //         },
        //         body: JSON.stringify(formData),
        //     })
        //         .then((res) => res.json())
        //         .then((data) => {
        //             if (data.success) {
        //                 showToast("Email Sent");
        //                 sharingContainer.style.display = "none";
        //             }
        //         });
        // };
    
        // const showToast = (msg) => {
        //     clearTimeout(toastTimer);
        //     toast.innerText = msg;
        //     toast.classList.add("show");
        //     toastTimer = setTimeout(() => {
        //         toast.classList.remove("show");
        //     }, 2000);
        // };
    </script>
    
</body>

</html>
